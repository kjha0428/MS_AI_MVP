# sample_data.py - Í∞ÑÎã®Ìïú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ (Key Vault ÏóÜÏùå)
import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random
import logging
from typing import Optional, Dict, Any
from sqlalchemy import text
from datetime import datetime, timedelta
import random
from sqlalchemy import text


class SampleDataManager:
    """Í∞ÑÎã®Ìïú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§"""

    def __init__(self, azure_config=None, force_local: bool = False):
        """
        ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Îß§ÎãàÏ†Ä Ï¥àÍ∏∞Ìôî

        Args:
            azure_config: Azure ÏÑ§Ï†ï Í∞ùÏ≤¥ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
            force_local: Í∞ïÏ†úÎ°ú Î°úÏª¨ SQLite ÏÇ¨Ïö©
        """
        self.azure_config = azure_config
        self.force_local = force_local
        self.logger = logging.getLogger(__name__)

        # üî• ÏàòÏ†ï: use_azure ÏÜçÏÑ± Ï¥àÍ∏∞Ìôî
        self.use_azure = (
            not force_local
            and azure_config
            and azure_config.is_production_ready()
            and hasattr(azure_config, "get_database_connection_string")
            and azure_config.get_database_connection_string()  # Ïã§Ï†ú Ïó∞Í≤∞ Î¨∏ÏûêÏó¥ ÌôïÏù∏
        )

        # üî• Ï∂îÍ∞Ä: use_sample_data ÏÜçÏÑ± Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ Ï∂îÍ∞Ä
        self.use_sample_data = not self.use_azure

        if self.use_azure and azure_config:
            try:
                from sqlalchemy import create_engine

                connection_string = azure_config.get_database_connection_string()
                if connection_string:
                    self.sqlalchemy_engine = create_engine(
                        connection_string, pool_timeout=20
                    )
                else:
                    # Ïó∞Í≤∞ Î¨∏ÏûêÏó¥Ïù¥ ÏóÜÏúºÎ©¥ Î°úÏª¨ Î™®ÎìúÎ°ú Ï†ÑÌôò
                    self.use_azure = False
                    self.use_sample_data = True
                    self.logger.warning("Azure Ïó∞Í≤∞ Î¨∏ÏûêÏó¥Ïù¥ ÏóÜÏñ¥ Î°úÏª¨ Î™®ÎìúÎ°ú Ï†ÑÌôò")
            except Exception as e:
                self.logger.warning(f"SQLAlchemy ÏóîÏßÑ ÏÉùÏÑ± Ïã§Ìå®: {e}")
                self.use_azure = False
                self.use_sample_data = True
        else:
            self.logger.info("Î°úÏª¨ SQLite Î™®ÎìúÎ°ú Ï¥àÍ∏∞Ìôî")

    def _create_azure_database(self):
        """Azure SQL Database ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
        try:
            import pyodbc
        except ImportError:
            raise ImportError("pyodbcÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§: pip install pyodbc")

        conn_string = self.azure_config.get_database_connection_string()
        if not conn_string or not conn_string.strip():
            raise ValueError("Azure SQL Database Ïó∞Í≤∞ Î¨∏ÏûêÏó¥Ïù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")

        try:
            conn = pyodbc.connect(conn_string, timeout=30)
        except Exception as e:
            raise Exception(f"Azure SQL Database Ïó∞Í≤∞ Ïã§Ìå®: {e}")

        try:
            # ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
            if not self._azure_tables_exist(conn):
                self.logger.info("Azure SQL DatabaseÏóê ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë...")
                self._create_tables()

            # Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
            data_count = self._check_azure_data(conn)

            # Ï∂©Î∂ÑÌïú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
            if data_count["total"] > 50:
                self.logger.info(
                    f"Ï∂©Î∂ÑÌïú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Í∞Ä Ï°¥Ïû¨Ìï©ÎãàÎã§ ({data_count['total']:,}Í±¥)"
                )
                return conn

            # Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä ÏÉùÏÑ±
            self.logger.info("ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë...")
            self._generate_data(conn)

            return conn

        except Exception as e:
            conn.close()
            raise e

    def _create_local_database(self):
        """Î°úÏª¨ SQLite ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
        conn = sqlite3.connect(":memory:", check_same_thread=False)

        # ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        # self._create_sqlite_tables(conn)
        self._create_tables()

        # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        self._generate_data(conn)

        self.logger.info("‚úÖ Î°úÏª¨ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ± ÏôÑÎ£å")
        return conn

    def _azure_tables_exist(self, conn) -> bool:
        """Azure SQL Database ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏"""
        try:
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT COUNT(*) 
                FROM INFORMATION_SCHEMA.TABLES 
                WHERE TABLE_NAME IN ('PY_NP_TRMN_RMNY_TXN', 'PY_NP_SBSC_RMNY_TXN', 'PY_DEPAZ_BAS')
            """
            )
            result = cursor.fetchone()
            return result[0] == 3
        except:
            return False

    def _check_azure_data(self, conn) -> Dict[str, int]:
        """Azure SQL Database Îç∞Ïù¥ÌÑ∞ ÌòÑÌô© ÌôïÏù∏"""
        cursor = conn.cursor()
        tables = ["PY_NP_TRMN_RMNY_TXN", "PY_NP_SBSC_RMNY_TXN", "PY_DEPAZ_BAS"]
        counts = {}
        total = 0

        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                counts[table] = count
                total += count
            except:
                counts[table] = 0

        counts["total"] = total
        return counts

    def ensure_tables_exist(self):
        """ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥† ÏóÜÏúºÎ©¥ ÏÉùÏÑ±"""
        if self.use_sample_data:
            return  # SQLiteÎäî Ïù¥ÎØ∏ Ï≤òÎ¶¨Îê®

        try:
            self.logger.info("Azure SQL Database ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ Ï§ë...")

            # ÌÖåÏù¥Î∏î Ï°¥Ïû¨ ÌôïÏù∏
            tables_exist = self._check_azure_tables_exist()

            if not tables_exist:
                self.logger.info("ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë...")
                self._create_tables()
                # self._generate_azure_sample_data()
                self._generate_data()
            else:
                self.logger.info("Azure SQL Database ÌÖåÏù¥Î∏îÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.")

        except Exception as e:
            self.logger.error(f"ÌÖåÏù¥Î∏î ÌôïÏù∏/ÏÉùÏÑ± Ïã§Ìå®: {e}")
            raise e

    def _check_azure_tables_exist(self) -> bool:
        """Azure SQL Database ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏"""
        try:
            check_query = """
            SELECT COUNT(*) as table_count
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME IN ('PY_NP_TRMN_RMNY_TXN', 'PY_NP_SBSC_RMNY_TXN', 'PY_DEPAZ_BAS')
            """

            with self.sqlalchemy_engine.connect() as conn:
                result = conn.execute(text(check_query))
                row = result.fetchone()
                table_count = row[0] if row else 0

            self.logger.info(f"Î∞úÍ≤¨Îêú ÌÖåÏù¥Î∏î Ïàò: {table_count}/3")
            return table_count == 3

        except Exception as e:
            self.logger.error(f"ÌÖåÏù¥Î∏î Ï°¥Ïû¨ ÌôïÏù∏ Ïã§Ìå®: {e}")
            return False

    def _create_tables(self):
        """Azure SQL Database ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
        try:
            with self.sqlalchemy_engine.connect() as conn:
                # Ìè¨Ìä∏ÏïÑÏõÉ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
                conn.execute(
                    text(
                        """
                    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PY_NP_TRMN_RMNY_TXN')
                    CREATE TABLE PY_NP_TRMN_RMNY_TXN (
                        NP_DIV_CD NVARCHAR(3),
                        TRMN_NP_ADM_NO NVARCHAR(11) PRIMARY KEY,
                        NP_TRMN_DATE DATE NOT NULL,
                        CNCL_WTHD_DATE DATE,
                        BCHNG_COMM_CMPN_ID NVARCHAR(50),
                        ACHNG_COMM_CMPN_ID NVARCHAR(50),
                        SVC_CONT_ID NVARCHAR(20),
                        BILL_ACC_ID NVARCHAR(11),
                        TEL_NO NVARCHAR(20),
                        NP_TRMN_DTL_STTUS_VAL NVARCHAR(3),
                        PAY_AMT DECIMAL(18,3),
                        CREATED_AT DATETIME2 DEFAULT GETDATE()
                    )
                """
                    )
                )

                # Ìè¨Ìä∏Ïù∏ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
                conn.execute(
                    text(
                        """
                    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PY_NP_SBSC_RMNY_TXN')
                    CREATE TABLE PY_NP_SBSC_RMNY_TXN (
                        NP_DIV_CD NVARCHAR(3),
                        NP_SBSC_RMNY_SEQ INT IDENTITY(1,1) PRIMARY KEY,
                        TRT_DATE DATE NOT NULL,
                        CNCL_DATE DATE,
                        BCHNG_COMM_CMPN_ID NVARCHAR(50),
                        ACHNG_COMM_CMPN_ID NVARCHAR(50),
                        SVC_CONT_ID NVARCHAR(20),
                        BILL_ACC_ID NVARCHAR(11),
                        TEL_NO NVARCHAR(20),
                        NP_STTUS_CD NVARCHAR(3),
                        SETL_AMT DECIMAL(15,2),
                        CREATED_AT DATETIME2 DEFAULT GETDATE()
                    )
                """
                    )
                )

                # ÏòàÏπòÍ∏à ÌÖåÏù¥Î∏î ÏÉùÏÑ±
                conn.execute(
                    text(
                        """
                    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PY_DEPAZ_BAS')
                    CREATE TABLE PY_DEPAZ_BAS (
                        DEPAZ_SEQ INT IDENTITY(1,1) PRIMARY KEY,
                        SVC_CONT_ID NVARCHAR(20),
                        BILL_ACC_ID NVARCHAR(11),
                        DEPAZ_DIV_CD NVARCHAR(3),
                        RMNY_DATE DATE,
                        RMNY_METH_CD NVARCHAR(5),
                        DEPAZ_AMT DECIMAL(15,2),
                        CREATED_AT DATETIME2 DEFAULT GETDATE()
                    )
                """
                    )
                )

                conn.commit()
                self.logger.info("Azure SQL Database ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏôÑÎ£å")

        except Exception as e:
            self.logger.error(f"Azure ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ïã§Ìå®: {e}")
            raise e

    # def _create_azure_tables(self):
    #     """Azure SQL Database ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    #     try:
    #         with self.sqlalchemy_engine.connect() as conn:
    #             # Ìè¨Ìä∏ÏïÑÏõÉ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    #             conn.execute(
    #                 text(
    #                     """
    #                 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PY_NP_TRMN_RMNY_TXN')
    #                 CREATE TABLE PY_NP_TRMN_RMNY_TXN (
    #                     NP_DIV_CD NVARCHAR(3),
    #                     TRMN_NP_ADM_NO NVARCHAR(11) PRIMARY KEY,
    #                     NP_TRMN_DATE DATE NOT NULL,
    #                     CNCL_WTHD_DATE DATE,
    #                     BCHNG_COMM_CMPN_ID NVARCHAR(50),
    #                     ACHNG_COMM_CMPN_ID NVARCHAR(50),
    #                     SVC_CONT_ID NVARCHAR(20),
    #                     BILL_ACC_ID NVARCHAR(11),
    #                     TEL_NO NVARCHAR(20),
    #                     NP_TRMN_DTL_STTUS_VAL NVARCHAR(3),
    #                     PAY_AMT DECIMAL(18,3),
    #                     CREATED_AT DATETIME2 DEFAULT GETDATE()
    #                 )
    #             """
    #                 )
    #             )

    #             # Ìè¨Ìä∏Ïù∏ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    #             conn.execute(
    #                 text(
    #                     """
    #                 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PY_NP_SBSC_RMNY_TXN')
    #                 CREATE TABLE PY_NP_SBSC_RMNY_TXN (
    #                     NP_DIV_CD NVARCHAR(3),
    #                     NP_SBSC_RMNY_SEQ INT IDENTITY(1,1) PRIMARY KEY,
    #                     TRT_DATE DATE NOT NULL,
    #                     CNCL_DATE DATE,
    #                     BCHNG_COMM_CMPN_ID NVARCHAR(50),
    #                     ACHNG_COMM_CMPN_ID NVARCHAR(50),
    #                     SVC_CONT_ID NVARCHAR(20),
    #                     BILL_ACC_ID NVARCHAR(11),
    #                     TEL_NO NVARCHAR(20),
    #                     NP_STTUS_CD NVARCHAR(3),
    #                     SETL_AMT DECIMAL(15,2),
    #                     CREATED_AT DATETIME2 DEFAULT GETDATE()
    #                 )
    #             """
    #                 )
    #             )

    #             # ÏòàÏπòÍ∏à ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    #             conn.execute(
    #                 text(
    #                     """
    #                 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'PY_DEPAZ_BAS')
    #                 CREATE TABLE PY_DEPAZ_BAS (
    #                     DEPAZ_SEQ INT IDENTITY(1,1) PRIMARY KEY,
    #                     SVC_CONT_ID NVARCHAR(20),
    #                     BILL_ACC_ID NVARCHAR(11),
    #                     DEPAZ_DIV_CD NVARCHAR(3),
    #                     RMNY_DATE DATE,
    #                     RMNY_METH_CD NVARCHAR(5),
    #                     DEPAZ_AMT DECIMAL(15,2),
    #                     CREATED_AT DATETIME2 DEFAULT GETDATE()
    #                 )
    #             """
    #                 )
    #             )

    #             conn.commit()
    #             self.logger.info("Azure SQL Database ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏôÑÎ£å")

    #     except Exception as e:
    #         self.logger.error(f"Azure ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ïã§Ìå®: {e}")
    #         raise e

    # def _generate_azure_sample_data(self):
    #     """Azure SQL Database ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
    #     try:
    #         operators = ["KT", "SKT", "LGU+"]

    #         with self.sqlalchemy_engine.connect() as conn:
    #             # Ìè¨Ìä∏ÏïÑÏõÉ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (50Í±¥)
    #             for i in range(50):
    #                 random_days = random.randint(0, 90)
    #                 transaction_date = (
    #                     datetime.now() - timedelta(days=random_days)
    #                 ).strftime("%Y-%m-%d")

    #                 from_operator = random.choice(operators)
    #                 to_operator = random.choice(
    #                     [op for op in operators if op != from_operator]
    #                 )
    #                 status = random.choice(["1", "2", "3"])
    #                 pay_amount = random.randint(10000, 100000)

    #                 conn.execute(
    #                     text(
    #                         """
    #                     INSERT INTO PY_NP_TRMN_RMNY_TXN
    #                     (NP_DIV_CD, TRMN_NP_ADM_NO, NP_TRMN_DATE, BCHNG_COMM_CMPN_ID,
    #                     ACHNG_COMM_CMPN_ID, SVC_CONT_ID, BILL_ACC_ID, TEL_NO,
    #                     NP_TRMN_DTL_STTUS_VAL, PAY_AMT)
    #                     VALUES (:np_div_cd, :trmn_np_adm_no, :np_trmn_date, :bchng_comm_cmpn_id,
    #                             :achng_comm_cmpn_id, :svc_cont_id, :bill_acc_id, :tel_no,
    #                             :np_trmn_dtl_sttus_val, :pay_amt)
    #                 """
    #                     ),
    #                     {
    #                         "np_div_cd": "OUT",
    #                         "trmn_np_adm_no": f"OUT{i+1:07d}",
    #                         "np_trmn_date": transaction_date,
    #                         "bchng_comm_cmpn_id": from_operator,
    #                         "achng_comm_cmpn_id": to_operator,
    #                         "svc_cont_id": f"{i+1:020d}",
    #                         "bill_acc_id": f"{i+1:011d}",
    #                         "tel_no": f"010{random.randint(1000,9999)}{random.randint(1000,9999)}",
    #                         "np_trmn_dtl_sttus_val": status,
    #                         "pay_amt": pay_amount,
    #                     },
    #                 )

    #             # Ìè¨Ìä∏Ïù∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (50Í±¥)
    #             for i in range(50):
    #                 random_days = random.randint(0, 90)
    #                 transaction_date = (
    #                     datetime.now() - timedelta(days=random_days)
    #                 ).strftime("%Y-%m-%d")

    #                 from_operator = random.choice(operators)
    #                 to_operator = random.choice(
    #                     [op for op in operators if op != from_operator]
    #                 )
    #                 status = random.choice(["OK", "CN", "WD"])
    #                 setl_amount = random.randint(10000, 100000)

    #                 conn.execute(
    #                     text(
    #                         """
    #                     INSERT INTO PY_NP_SBSC_RMNY_TXN
    #                     (NP_DIV_CD, TRT_DATE, BCHNG_COMM_CMPN_ID, ACHNG_COMM_CMPN_ID,
    #                     SVC_CONT_ID, BILL_ACC_ID, TEL_NO, NP_STTUS_CD, SETL_AMT)
    #                     VALUES (:np_div_cd, :trt_date, :bchng_comm_cmpn_id, :achng_comm_cmpn_id,
    #                             :svc_cont_id, :bill_acc_id, :tel_no, :np_sttus_cd, :setl_amt)
    #                 """
    #                     ),
    #                     {
    #                         "np_div_cd": "IN",
    #                         "trt_date": transaction_date,
    #                         "bchng_comm_cmpn_id": from_operator,
    #                         "achng_comm_cmpn_id": to_operator,
    #                         "svc_cont_id": f"{i+100:020d}",
    #                         "bill_acc_id": f"{i+100:011d}",
    #                         "tel_no": f"010{random.randint(1000,9999)}{random.randint(1000,9999)}",
    #                         "np_sttus_cd": status,
    #                         "setl_amt": setl_amount,
    #                     },
    #                 )

    #             # ÏòàÏπòÍ∏à Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (50Í±¥)
    #             for i in range(50):
    #                 random_days = random.randint(0, 90)
    #                 deposit_date = (
    #                     datetime.now() - timedelta(days=random_days)
    #                 ).strftime("%Y-%m-%d")

    #                 conn.execute(
    #                     text(
    #                         """
    #                     INSERT INTO PY_DEPAZ_BAS
    #                     (SVC_CONT_ID, BILL_ACC_ID, DEPAZ_DIV_CD, RMNY_DATE, RMNY_METH_CD, DEPAZ_AMT)
    #                     VALUES (:svc_cont_id, :bill_acc_id, :depaz_div_cd, :rmny_date, :rmny_meth_cd, :depaz_amt)
    #                 """
    #                     ),
    #                     {
    #                         "svc_cont_id": f"{i+200:020d}",
    #                         "bill_acc_id": f"{i+200:011d}",
    #                         "depaz_div_cd": random.choice(["10", "90"]),
    #                         "rmny_date": deposit_date,
    #                         "rmny_meth_cd": random.choice(["NA", "CA"]),
    #                         "depaz_amt": random.randint(5000, 50000),
    #                     },
    #                 )

    #             conn.commit()
    #             self.logger.info("Azure SQL Database ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏôÑÎ£å")

    #     except Exception as e:
    #         self.logger.error(f"Azure ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ïã§Ìå®: {e}")
    #         raise e

    # def _create_sqlite_tables(self, conn):
    #     """SQLite ÌÖåÏù¥Î∏î ÏÉùÏÑ±"""
    #     cursor = conn.cursor()

    #     # Ìè¨Ìä∏ÏïÑÏõÉ ÌÖåÏù¥Î∏î
    #     cursor.execute(
    #         """
    #         CREATE TABLE PY_NP_TRMN_RMNY_TXN (
    #             NP_DIV_CD VARCHAR(3),
    #             TRMN_NP_ADM_NO VARCHAR(11) PRIMARY KEY,
    #             NP_TRMN_DATE DATE NOT NULL,
    #             CNCL_WTHD_DATE DATE,
    #             BCHNG_COMM_CMPN_ID VARCHAR(50),
    #             ACHNG_COMM_CMPN_ID VARCHAR(50),
    #             SVC_CONT_ID VARCHAR(20),
    #             BILL_ACC_ID VARCHAR(11),
    #             TEL_NO VARCHAR(20),
    #             NP_TRMN_DTL_STTUS_VAL VARCHAR(3),
    #             PAY_AMT DECIMAL(18,3)
    #         )
    #     """
    #     )

    #     # Ìè¨Ìä∏Ïù∏ ÌÖåÏù¥Î∏î
    #     cursor.execute(
    #         """
    #         CREATE TABLE PY_NP_SBSC_RMNY_TXN (
    #             NP_DIV_CD VARCHAR(3),
    #             NP_SBSC_RMNY_SEQ INTEGER PRIMARY KEY,
    #             TRT_DATE DATE NOT NULL,
    #             CNCL_DATE DATE,
    #             BCHNG_COMM_CMPN_ID VARCHAR(50),
    #             ACHNG_COMM_CMPN_ID VARCHAR(50),
    #             SVC_CONT_ID VARCHAR(20),
    #             BILL_ACC_ID VARCHAR(11),
    #             TEL_NO VARCHAR(20),
    #             NP_STTUS_CD VARCHAR(3),
    #             SETL_AMT DECIMAL(15,2)
    #         )
    #     """
    #     )

    #     # ÏòàÏπòÍ∏à ÌÖåÏù¥Î∏î
    #     cursor.execute(
    #         """
    #         CREATE TABLE PY_DEPAZ_BAS (
    #             DEPAZ_SEQ INTEGER PRIMARY KEY,
    #             SVC_CONT_ID VARCHAR(20),
    #             BILL_ACC_ID VARCHAR(11),
    #             DEPAZ_DIV_CD VARCHAR(3),
    #             RMNY_DATE DATE,
    #             RMNY_METH_CD VARCHAR(5),
    #             DEPAZ_AMT DECIMAL(15,2)
    #         )
    #     """
    #     )

    #     conn.commit()
    #     self.logger.info("SQLite ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏôÑÎ£å")

    def _generate_data(self, conn):
        """Azure SQL Database ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
        cursor = conn.cursor()
        operators = ["KT", "SKT", "LGU+", "KT MVNO", "SKT MVNO", "LGU+ MVNO"]

        # ÏµúÍ∑º 4Í∞úÏõî Í∏∞Í∞Ñ
        end_date = datetime.now()
        start_date = end_date - timedelta(days=120)

        # Ìè¨Ìä∏ÏïÑÏõÉ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        for i in range(50):
            random_days = random.randint(0, (end_date - start_date).days)
            transaction_date = start_date + timedelta(days=random_days)

            # ÌÜµÏã†ÏÇ¨ ÏÑ†ÌÉù(Ï†ÑÏÇ¨ÏóÖÏûê/ÌõÑÏÇ¨ÏóÖÏûê)
            from_operator = random.choice(["KT", "KT MVNO"])
            to_operator = random.choice([op for op in operators if op != from_operator])
            np_trmn_dtl_sttus_val = random.choice(["1", "2", "3"])

            # Î≤àÌò∏Ïù¥Îèô ÏÉÅÌÉú ÏΩîÎìúÏóê Îî∞Î•∏ cncl_wthd_date ÏÑ§Ï†ï
            np_trmn_dtl_sttus_val = random.choice(["1", "2", "3"])
            np_trmn_date = transaction_date.strftime("%Y-%m-%d")
            # TRT_STUS_CDÏóê Îî∞Îùº NP_TRMN_DATE ÏÑ§Ï†ï
            if np_trmn_dtl_sttus_val == "1":
                cncl_wthd_date = None  # NULL
            elif np_trmn_dtl_sttus_val == "2":
                cncl_wthd_date = np_trmn_date  # NP_TRMN_DATE ÎèôÏùº
            else:  # WD
                # CNCL_WTHD_DATE Ïù¥ÌõÑ 1~15Ïùº ÎûúÎç§ ÎÇ†Ïßú
                random_days = random.randint(1, 15)
                cncl_wthd_date = (
                    transaction_date + timedelta(days=random_days)
                ).strftime("%Y-%m-%d")

            svc_cont_id = f"{i+1:020d}"
            bill_acc_id = f"{i+1:011d}"
            tel_no = f"010{random.randint(1000,9999)}{random.randint(1000,9999)}"
            pay_amount = random.randint(10, 1000000)

            cursor.execute(
                """
                INSERT INTO PY_NP_TRMN_RMNY_TXN 
                VALUES (?,?,?,?,?,?,?,?,?,?,?)
                """,
                (
                    "OUT",  # NP_DIV_CD
                    f"{i+1:07d}",  # TRMN_NP_ADM_NO
                    np_trmn_date,  # NP_TRMN_DATE
                    cncl_wthd_date,  # CNCL_WTHD_DATE
                    from_operator,  # BCHNG_COMM_CMPN_ID
                    to_operator,  # ACHNG_COMM_CMPN_ID
                    svc_cont_id,  # SVC_CONT_ID
                    bill_acc_id,  # BILL_ACC_ID
                    tel_no,  # TEL_NO
                    np_trmn_dtl_sttus_val,  # NP_TRMN_DTL_STTUS_VAL
                    pay_amount,  # PAY_AMT
                ),
            )

            cursor.execute(
                """
                INSERT INTO PY_DEPAZ_BAS 
                VALUES (?,?,?,?,?,?,?)
                """,
                (
                    i + 1,  # DEPAZ_SEQ
                    svc_cont_id,  # SVC_CONT_ID
                    bill_acc_id,  # BILL_ACC_ID
                    random.choice(["10", "90"]),  # DEPAZ_DIV_CD
                    np_trmn_date,  # RMNY_DATE
                    random.choice(["NA", "CA"]),  # RMNY_METH_CD
                    pay_amount,  # DEPAZ_AMT
                ),
            )

        # Ìè¨Ìä∏Ïù∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        for i in range(50):
            random_days = random.randint(0, (end_date - start_date).days)
            transaction_date = start_date + timedelta(days=random_days)

            to_operator = random.choice(["KT", "KT MVNO"])
            from_operator = random.choice([op for op in operators if op != to_operator])

            # Î≤àÌò∏Ïù¥Îèô ÏÉÅÌÉú ÏΩîÎìúÏóê Îî∞Î•∏ cncl_date ÏÑ§Ï†ï
            np_sttus_cd = random.choice(["OK", "CN", "WD"])
            trt_date = transaction_date.strftime("%Y-%m-%d")
            # TRT_STUS_CDÏóê Îî∞Îùº NP_TRMN_DATE ÏÑ§Ï†ï
            if np_sttus_cd == "OK":
                cncl_date = None  # NULL
            elif np_sttus_cd == "CN":
                cncl_date = trt_date  # TRT_DATE ÎèôÏùº
            else:  # WD
                # CNCL_WTHD_DATE Ïù¥ÌõÑ 1~15Ïùº ÎûúÎç§ ÎÇ†Ïßú
                random_days = random.randint(1, 15)
                cncl_date = (transaction_date + timedelta(days=random_days)).strftime(
                    "%Y-%m-%d"
                )

            settlement_amount = random.randint(10, 1000000)

            cursor.execute(
                """
                INSERT INTO  PY_NP_SBSC_RMNY_TXN 
                VALUES (?,?,?,?,?,?,?,?,?,?,?)
                """,
                (
                    "IN",  # NP_DIV_CD,
                    i + 1,  # NP_SBSC_RMNY_SEQ
                    trt_date,  # TRT_DATE
                    cncl_date,  # CNCL_DATE
                    from_operator,  # BCHNG_COMM_CMPN_ID
                    to_operator,  # ACHNG_COMM_CMPN_ID
                    f"{i+1:020d}",  # SVC_CONT_ID
                    f"{i+1:011d}",  # BILL_ACC_ID
                    f"010{random.randint(1000,9999)}{random.randint(1000,9999)}",  # TEL_NO
                    np_sttus_cd,  # NP_STTUS_CD
                    settlement_amount,  # SETL_AMT
                ),
            )

        conn.commit()
        self.logger.info("Database ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏôÑÎ£å")

    def is_using_azure(self) -> bool:
        """Azure ÏÇ¨Ïö© Ïó¨Î∂Ä Î∞òÌôò"""
        return self.use_sample_data

    def get_connection_info(self) -> Dict[str, Any]:
        """Ïó∞Í≤∞ Ï†ïÎ≥¥ Î∞òÌôò"""
        return {
            "type": "Azure SQL Database" if self.use_sample_data else "SQLite",
            "azure_ready": (
                self.azure_config.is_production_ready() if self.azure_config else False
            ),
            "force_local": self.force_local,
        }

    def cleanup_sample_data(self, conn):
        """ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ (AzureÎßå Ìï¥Îãπ)"""
        if not self.use_sample_data:
            self.logger.info("SQLiteÎäî Î©îÎ™®Î¶¨ Í∏∞Î∞òÏù¥ÎØÄÎ°ú Ï†ïÎ¶¨Í∞Ä Î∂àÌïÑÏöîÌï©ÎãàÎã§")
            return

        try:
            cursor = conn.cursor()

            # Azure SQLÏóêÏÑú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
            cursor.execute(
                "DELETE FROM PY_NP_TRMN_RMNY_TXN WHERE CREATED_AT >= DATEADD(day, -1, GETDATE())"
            )
            cursor.execute(
                "DELETE FROM PY_NP_SBSC_RMNY_TXN WHERE CREATED_AT >= DATEADD(day, -1, GETDATE())"
            )
            cursor.execute(
                "DELETE FROM PY_DEPAZ_BAS WHERE CREATED_AT >= DATEADD(day, -1, GETDATE())"
            )

            conn.commit()
            self.logger.info("Azure SQL Database ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏôÑÎ£å")

        except Exception as e:
            self.logger.error(f"ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Ïã§Ìå®: {e}")


def create_sample_database(self):
    """ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ± (Ïù∏Ïä§ÌÑ¥Ïä§ Î©îÏÑúÎìú)"""
    try:
        if self.use_azure:
            # Azure SQL Database Î™®Îìú
            self.logger.info("Azure SQL Database ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë...")
            return self._create_azure_database()
        else:
            # Î°úÏª¨ SQLite Î™®Îìú
            self.logger.info("Î°úÏª¨ SQLite ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë...")
            return self._create_local_database()
    except Exception as e:
        self.logger.error(f"ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ± Ïã§Ìå®: {e}")
        # Azure Ïã§Ìå®Ïãú Î°úÏª¨Î°ú Ìè¥Î∞±
        if self.use_azure:
            self.logger.warning("Azure Ïó∞Í≤∞ Ïã§Ìå®, Î°úÏª¨ SQLiteÎ°ú Ï†ÑÌôò")
            self.use_azure = False
            return self._create_local_database()
        raise e


def get_sample_statistics(conn):
    """ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ Ï°∞Ìöå (Í∏∞Ï°¥ Ìï®ÏàòÏôÄ Ìò∏Ìôò)"""
    try:
        print("\nüìä ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ:")
        print("=" * 50)

        # Ìè¨Ìä∏ÏïÑÏõÉ ÌÜµÍ≥Ñ
        port_out_query = """
            SELECT 
                COUNT(*) as total_count,
                SUM(PAY_AMT) as total_amount,
                AVG(PAY_AMT) as avg_amount
            FROM PY_NP_TRMN_RMNY_TXN
            WHERE NP_TRMN_DTL_STTUS_VAL IN ('1', '3')
        """
        port_out_df = pd.read_sql_query(port_out_query, conn)

        print("üì§ Ìè¨Ìä∏ÏïÑÏõÉ ÌòÑÌô©:")
        print(f"   Ï¥ù Í±¥Ïàò: {port_out_df.iloc[0]['total_count']:,}Í±¥")
        print(f"   Ï¥ù Ï†ïÏÇ∞Ïï°: {port_out_df.iloc[0]['total_amount']:,.0f}Ïõê")
        print(f"   ÌèâÍ∑† Ï†ïÏÇ∞Ïï°: {port_out_df.iloc[0]['avg_amount']:,.0f}Ïõê")

        # Ìè¨Ìä∏Ïù∏ ÌÜµÍ≥Ñ
        port_in_query = """
            SELECT 
                COUNT(*) as total_count,
                SUM(SETL_AMT) as total_amount,
                AVG(SETL_AMT) as avg_amount
            FROM PY_NP_SBSC_RMNY_TXN
            WHERE NP_STTUS_CD IN ('OK', 'WD')
        """
        port_in_df = pd.read_sql_query(port_in_query, conn)

        print("\nüì• Ìè¨Ìä∏Ïù∏ ÌòÑÌô©:")
        print(f"   Ï¥ù Í±¥Ïàò: {port_in_df.iloc[0]['total_count']:,}Í±¥")
        print(f"   Ï¥ù Ï†ïÏÇ∞Ïï°: {port_in_df.iloc[0]['total_amount']:,.0f}Ïõê")
        print(f"   ÌèâÍ∑† Ï†ïÏÇ∞Ïï°: {port_in_df.iloc[0]['avg_amount']:,.0f}Ïõê")

        # ÏòàÏπòÍ∏à ÌÜµÍ≥Ñ
        deposit_query = """
            SELECT 
                COUNT(*) as total_count,
                SUM(DEPAZ_AMT) as total_amount,
                AVG(DEPAZ_AMT) as avg_amount
            FROM PY_DEPAZ_BAS
            WHERE DEPAZ_DIV_CD = '10'
        """
        deposit_df = pd.read_sql_query(deposit_query, conn)

        print("\nüí∞ ÏòàÏπòÍ∏à ÌòÑÌô©:")
        print(f"   Ï¥ù Í±¥Ïàò: {deposit_df.iloc[0]['total_count']:,}Í±¥")
        print(f"   Ï¥ù ÏòàÏπòÍ∏à: {deposit_df.iloc[0]['total_amount']:,.0f}Ïõê")
        print(f"   ÌèâÍ∑† ÏòàÏπòÍ∏à: {deposit_df.iloc[0]['avg_amount']:,.0f}Ïõê")

        print("=" * 50)

    except Exception as e:
        print(f"ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®: {e}")


# ÌÖåÏä§Ìä∏ Ìï®Ïàò
def test_sample_data_manager():
    """ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Îß§ÎãàÏ†Ä ÌÖåÏä§Ìä∏"""
    print("üß™ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Îß§ÎãàÏ†Ä ÌÖåÏä§Ìä∏Î•º ÏãúÏûëÌï©ÎãàÎã§...")

    try:
        # Azure ÏÑ§Ï†ï Î°úÎìú ÏãúÎèÑ
        try:
            from azure_config import get_azure_config

            azure_config = get_azure_config()
            print(f"Azure ÏÑ§Ï†ï Î°úÎìú ÏÑ±Í≥µ")
        except Exception as e:
            print(f"Azure ÏÑ§Ï†ï Î°úÎìú Ïã§Ìå®: {e}")
            azure_config = None

        # 1. Azure Î™®Îìú ÌÖåÏä§Ìä∏ (Í∞ÄÎä•Ìïú Í≤ΩÏö∞)
        if azure_config and azure_config.is_production_ready():
            print("\n‚òÅÔ∏è Azure SQL Database Î™®Îìú ÌÖåÏä§Ìä∏:")
            try:
                azure_manager = SampleDataManager(azure_config, force_local=False)
                azure_conn = azure_manager.create_sample_database()

                connection_info = azure_manager.get_connection_info()
                print(f"   Ïó∞Í≤∞ ÌÉÄÏûÖ: {connection_info['type']}")

                # ÌÜµÍ≥Ñ ÌôïÏù∏
                stats = azure_manager.get_sample_statistics(azure_conn)
                if stats:
                    print("   üìä Azure Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ:")
                    for data_type, stat in stats.items():
                        count = stat.get("total_count", 0)
                        amount = stat.get("total_amount", 0)
                        print(f"     {data_type}: {count:,}Í±¥, {amount:,.0f}Ïõê")

                azure_conn.close()
                print("   ‚úÖ Azure Î™®Îìú ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ")
            except Exception as e:
                print(f"   ‚ùå Azure Î™®Îìú ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")

        # 2. Î°úÏª¨ Î™®Îìú ÌÖåÏä§Ìä∏
        print("\nüíª Î°úÏª¨ SQLite Î™®Îìú ÌÖåÏä§Ìä∏:")
        local_manager = SampleDataManager(azure_config, force_local=True)
        local_conn = local_manager.create_sample_database()

        connection_info = local_manager.get_connection_info()
        print(f"   Ïó∞Í≤∞ ÌÉÄÏûÖ: {connection_info['type']}")

        # ÌÜµÍ≥Ñ ÌôïÏù∏
        stats = local_manager.get_sample_statistics(local_conn)
        if stats:
            print("   üìä Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ:")
            for data_type, stat in stats.items():
                count = stat.get("total_count", 0)
                amount = stat.get("total_amount", 0)
                print(f"     {data_type}: {count:,}Í±¥, {amount:,.0f}Ïõê")

        # 3. Ìò∏ÌôòÏÑ± ÌÖåÏä§Ìä∏
        print("\nüîÑ Í∏∞Ï°¥ Ìï®Ïàò Ìò∏ÌôòÏÑ± ÌÖåÏä§Ìä∏:")
        compat_conn = create_sample_database(azure_config, force_local=True)
        get_sample_statistics(compat_conn)

        print("\n‚úÖ Î™®Îì† ÌÖåÏä§Ìä∏ ÏôÑÎ£å!")

    except Exception as e:
        print(f"\n‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    test_sample_data_manager()
